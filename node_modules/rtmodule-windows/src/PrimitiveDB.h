#pragma once
#include<vector>
#include<string>
#include "GLObject.h"
#include "Log.h"
#include <algorithm>
#include <fstream>
#include <sstream>
#ifdef DEBUG
    #include <iostream>
#endif
#ifdef __linux__
    #include <stdlib.h>
    #include <unistd.h>
#endif

struct errAndLeg
{
    IDArray errIds;//erro Ids
    IDArray legIds;//legal Ids
};

struct resultWithIndex {
    int value;
    size_t index;
    resultWithIndex(int val, size_t ind) { value = val; index = ind; }
};

class PrimitiveDB {
    //default constructor
protected://only visiable in derived classes
    static std::vector<Sequence> TDBArray;
    static std::vector<Sequence> PDBArray;
    static std::vector<Sequence> QDBArray;
    static std::vector<BBTreeNode*> TBBIndex;
    static std::vector<BB> PBBIndex;
    static int _initTDB;
    static int initTDB(){
        std::string pathstr;
        #ifdef _WIN32
            pathstr = "./output_test.txt";
        #endif
        #ifdef __linux__
            char* cur_path = get_current_dir_name();
            std::string cur_path_str = cur_path;
            free(cur_path);
            cur_path=NULL;
            pathstr = cur_path_str + "/output_test.txt"; 
        #endif
        ifstream fp(pathstr.c_str());
        #ifdef DEBUG
            std::cout<<"run init"<<std::endl;
            if (!fp){
                std::cout << "fail to open the file" <<endl;
            }
        #endif
        string seqLine;
        while(getline(fp,seqLine)){
            Sequence seq;
            std::string str;
            istringstream readSeq(seqLine);
            bool isLng = true;//in the file, a seq data always start with its Longitude. 
            double tmpLng = 0;
            while(getline(readSeq,str,',')){
                #ifdef _WIN32
                if(isLng) tmpLng = stod(str);
                else {
                    seq.push_back(Point(tmpLng,stod(str)));
                }
                isLng = (!isLng);
                #endif
                #ifdef __linux__
                    if(isLng) tmpLng = atof(str.c_str());
                    else {
                        seq.push_back(Point(tmpLng,atof(str.c_str())));
                    }
                    isLng = (!isLng);
                #endif

            }
            TDBArray.push_back(seq);
            TBBIndex.push_back(buildBBTree(seq, 0, seq.size()-1));//construct index
        }
        return 0;
    }
    static double maxx;
    static double maxy;
    static double minx;
    static double miny;
    Log DBLog;

public:
    Log getDBLog() const { return DBLog; }
    CoordBound getBound(std::vector<Sequence>& primitive);
    void setBound(Shader* shader, float maxn);
    void addBound(Point p);
    void deleteBound(Point p);
    IDArray getTopk(std::vector<int> retFromShader, IDArray ids, int topk);
    errAndLeg idRangeCheck(IDArray ids, std::vector<Sequence>& db);
    Primitive** createTrajectoryArray(std::vector<Sequence>* db, IDArray ids);
    Primitive** createPolygonArray(std::vector<Sequence>* db, IDArray ids);
    void insectFillter(IDArray& tids,IDArray& pids,bool ifFillterPoly);//in trajselect set ifFillterPoly=false, in poly select set it to be true
    virtual void ADD(std::vector<Sequence> seqArray) = 0;
    virtual void DELETE() = 0;
    virtual void DELETE(IDArray ids) = 0;
    virtual void SELECT(IDArray ids1, IDArray ids2, int topk) = 0;
    virtual void SELECT(IDArray ids, int topk) = 0;
    virtual void SELECT(IDArray ids) = 0;
    virtual void SHOW() = 0;
    virtual void SHOW(IDArray ids) = 0;
    virtual void PRINT() = 0;
    virtual void PRINT(IDArray result_ids) = 0;
};

class TrajectoryDB :public PrimitiveDB {
public:
    void ADD(std::vector<Sequence> seqArray);
    void DELETE();
    void DELETE(IDArray ids);
    void SELECT(IDArray tids, IDArray pids, int topk);
    void SELECT(IDArray pids, int topk);
    void SELECT(IDArray pids);
    void SHOW();
    void SHOW(IDArray ids);
    void PRINT();
    void PRINT(IDArray result_ids);
};

class QueryTrajDB : public PrimitiveDB {
public:
    void ADD(std::vector<Sequence> seqArray);
    void DELETE();
    void DELETE(IDArray ids);
    void SELECT(IDArray tids, IDArray qids, int topk);
    void SELECT(IDArray qids,int topk);
    void SELECT(IDArray qids);
    void SHOW();
    void SHOW(IDArray ids);
    void PRINT();
    void PRINT(IDArray result_ids);
};

class PolygonDB : public PrimitiveDB {
public:
    void ADD(std::vector<Sequence> seqArray);
    void DELETE();
    void DELETE(IDArray ids);
    void SELECT(IDArray pids, IDArray tids, int topk);
    void SELECT(IDArray tids, int topk);
    void SELECT(IDArray tids);
    void SHOW();
    void SHOW(IDArray ids);
    void PRINT();
    void PRINT(IDArray result_ids);
};