#include <napi.h>
#include "Lexer_Parser.h"
#include <iostream>

Napi::Object processInputString(const Napi::CallbackInfo& info){
    Napi::Env env = info.Env();
    std::string inputString = (std::string) info[0].ToString();
    //return object and its props
    Napi::Object ret = Napi::Object::New(env);
    bool isLexerSuccess;
    std::string logInfo;
    std::string retType;
    Napi::Array retArray = Napi::Array::New(env); 
    //lexer and parser
    Lexer lexer;
    lexer.scan(inputString);
    Log lexerlog = lexer.getLexerLog();
    if (lexerlog.getIsSuccess()) {
        //parser
        Parser parser;
        parser.parse(lexer.getTokenList());
        Log parserLog = parser.getParserLog();//log需要加一个属性，来保存返回的sequence
        //set result
        isLexerSuccess = true;
        logInfo = parserLog.getLog();
        retType = parserLog.getPrimitiveType();//todo
        std::vector<Sequence> seqs = parserLog.getSeqs();//todo
        for(size_t i = 0; i < seqs.size(); ++i){
            Napi::Array tempArray=Napi::Array::New(env);
            for(size_t j = 0; j < seqs[i].size(); ++j){
                Napi::Array point = Napi::Array::New(env);
                point.Set(Napi::Number::New(env,0),Napi::Number::New(env,seqs[i][j].x));
                point.Set(Napi::Number::New(env,1),Napi::Number::New(env,seqs[i][j].y));
                tempArray.Set(Napi::Number::New(env,j),point);
            }
            retArray.Set(Napi::Number::New(env,i),tempArray);
        }
    }
    else {
        isLexerSuccess = false;
        logInfo = lexerlog.getLog();
        retType = "unknown";
        //not set retArray, keep empty
    }

    ret.Set(Napi::String::New(env, "isLexerSuccess"), Napi::Boolean::New(env, isLexerSuccess));
    ret.Set(Napi::String::New(env, "logInfo"), Napi::String::New(env, logInfo));
    ret.Set(Napi::String::New(env, "retType"), Napi::String::New(env, retType));
    ret.Set(Napi::String::New(env, "retArray"), retArray);
    return ret;
}

Napi::Object Init(Napi::Env env, Napi::Object exports){
    exports.Set(Napi::String::New(env,"processInput"), Napi::Function::New(env,processInputString));
    return exports;
}

NODE_API_MODULE(rtmodule,Init)